package sneps.snepslog;

import java.lang.System;
import java.io.*;
import java_cup.runtime.Symbol;

%%
%class Lexer

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol
%char
%line

%{
//initialize  variables to be used by class
	
%}


%init{
//Add code to be executed on initialization of the lexer

%init}

%eofval{
//Add code to be executed when the end of the file is reached
	return (new Symbol(sym.EOF,""));
%eofval}

COMMENT=(;(.)*)
WHITESPACE=((" "+)|("	"+))
ACTIVATE=(activate)
BANG=(!)
DOT=(\.)
ADD_TO_CONTEXT=(add-to-context)
ASK=(ask)
ASKIFNOT=(askifnot)
ASKWH=(askwh)
ASKWHNOT=(askwhnot)
BELIEFS_ABOUT=(beliefs-about)
BR_MODE=(br-mode)
AUTO=(auto)
MANUAL=(manual)
CLEAR_INFER=(clear-infer)
CLEARKB=(clearkb)
COPYRIGHT=(copyright)
DEFINE_FRAME=(define-frame)
DEFINE_PATH=(define-path)
DEFINE_SEMANTIC=(define-semantic)
DEFINE_RELATION=(define-relation)
QUESTION_MARK=(\?)
DESCRIBE_CONTEXT=(describe-context)
DESCRIBE_TERMS=(describe-terms)
EXPERT=(expert)
LIST_ASSERTED_WFFS=(list-asserted-wffs)
LIST_CONTEXTS=(list-contexts)
LIST_TERMS=(list-terms)
LIST_WFFS=(list-wffs)
LOAD=(load)
NORMAL=(normal)
PERFORM=(perform)
REMOVE_FROM_CONTEXT=(remove-from-context)
SET_CONTEXT=(set-context)
SET_DEFAULT_CONTEXT=(set-default-context)
SET_MODE_1=(set-mode-1)
SET_MODE_2=(set-mode-2)
SET_MODE_3=(set-mode-3)
SHOW=(show)
TRACE=(trace)
UNDEFINE_PATH=(undefine-path)
UNLABELED=(unlabeled)
UNTRACE=(untrace)
INFERENCE=(inference)
ACTING=(acting)
FILEPATH=([A-Za-z0-9/]+\.snepslog)
STRING_LIT=(\"[A-Za-z0-9 _"-"]*\")
INT_LIT=([1-9][0-9]*)|(0)
EQUALITY=(<=>)
IMPLICATION=(=>)
OR_ENTAILMENT=(v=>)
AND_ENTAILMENT=(&=>)
NUMERICAL_ENTAILMENT=([1-9][0-9]*=>)
NOT=(~)
ANDOR=(andor)
AND=(and)
OR=(or)
NAND=(nand)
NOR=(nor)
XOR=(xor)
IFF=(iff)
THRESH=(thresh)
ALL=(all)
COMMA=(,)
COLON=(:)
OPEN_PARAN=(\()
CLOSE_PARAN=(\))
OPEN_CURLY=(\{)
CLOSE_CURLY=(\})
WITHSOME=(withsome)
WITHALL=(withall)
WFF=(wff[1-9][0-9]*)
IFDO=(ifdo)
WHENDO=(whendo)
WHENEVERDO=(wheneverdo)
ACTPLAN=(ActPlan)
EFFECT=(Effect)
GOALPLAN=(GoalPlan)
PRECONDITION=(Precondition)
KPLUS=(kplus)
KSTAR=(kstar)
COMPOSE=(compose)
CONVERSE=(converse)
IRREFLEXIVE_RESTRICT=(irreflexive-restrict)
DOMAIN_RESTRICT=(domain-restrict)
RANGE_RESTRICT=(range-restrict)
CFRES=(caseframe-restrict)
BANGPATH=(bang)
EMPTYPATH=(empty)
EXPAND=(expand)
REDUCE=(reduce)
NONE=(none)
IDENTIFIER=([A-Za-z][A-Za-z0-9_"-"]*)

%% 
<YYINITIAL> {COMMENT} {
}
 <YYINITIAL> {WHITESPACE} {
}
<YYINITIAL> {ACTIVATE} { 
	return (new Symbol(sym.ACTIVATE,yytext()));
}
<YYINITIAL> {BANG} { 
	return (new Symbol(sym.BANG,yytext()));
}
<YYINITIAL> {DOT} { 
	return (new Symbol(sym.DOT,yytext()));
}
<YYINITIAL> {ADD_TO_CONTEXT} { 
	return (new Symbol(sym.ADD_TO_CONTEXT,yytext()));
}
<YYINITIAL> {ASK} { 
	return (new Symbol(sym.ASK,yytext()));
}
<YYINITIAL> {ASKIFNOT} { 
	return (new Symbol(sym.ASKIFNOT,yytext()));
}
<YYINITIAL> {ASKWH} { 
	return (new Symbol(sym.ASKWH,yytext()));
}
<YYINITIAL> {ASKWHNOT} { 
	return (new Symbol(sym.ASKWHNOT,yytext()));
}
<YYINITIAL> {BELIEFS_ABOUT} { 
	return (new Symbol(sym.BELIEFS_ABOUT,yytext()));
}
<YYINITIAL> {BR_MODE} { 
	return (new Symbol(sym.BR_MODE,yytext()));
}
<YYINITIAL> {AUTO} { 
	return (new Symbol(sym.AUTO,yytext()));
}
<YYINITIAL> {MANUAL} { 
	return (new Symbol(sym.MANUAL,yytext()));
}
<YYINITIAL> {CLEAR_INFER} { 
	return (new Symbol(sym.CLEAR_INFER,yytext()));
}
<YYINITIAL> {CLEARKB} { 
	return (new Symbol(sym.CLEARKB,yytext()));
}
<YYINITIAL> {COPYRIGHT} { 
	return (new Symbol(sym.COPYRIGHT,yytext()));
}
<YYINITIAL> {DEFINE_FRAME} { 
	return (new Symbol(sym.DEFINE_FRAME,yytext()));
}
<YYINITIAL> {DEFINE_PATH} { 
	return (new Symbol(sym.DEFINE_PATH,yytext()));
}
<YYINITIAL> {DEFINE_SEMANTIC} { 
	return (new Symbol(sym.DEFINE_SEMANTIC,yytext()));
}
<YYINITIAL> {DEFINE_RELATION} { 
	return (new Symbol(sym.DEFINE_RELATION,yytext()));
}
<YYINITIAL> {QUESTION_MARK} { 
	return (new Symbol(sym.QUESTION_MARK,yytext()));
}
<YYINITIAL> {DESCRIBE_CONTEXT} { 
	return (new Symbol(sym.DESCRIBE_CONTEXT,yytext()));
}
<YYINITIAL> {DESCRIBE_TERMS} { 
	return (new Symbol(sym.DESCRIBE_TERMS,yytext()));
}
<YYINITIAL> {EXPERT} { 
	return (new Symbol(sym.EXPERT,yytext()));
}
<YYINITIAL> {LIST_ASSERTED_WFFS} { 
	return (new Symbol(sym.LIST_ASSERTED_WFFS,yytext()));
}
<YYINITIAL> {LIST_CONTEXTS} { 
	return (new Symbol(sym.LIST_CONTEXTS,yytext()));
}
<YYINITIAL> {LIST_TERMS} { 
	return (new Symbol(sym.LIST_TERMS,yytext()));
}
<YYINITIAL> {LIST_WFFS} { 
	return (new Symbol(sym.LIST_WFFS,yytext()));
}
<YYINITIAL> {LOAD} { 
	return (new Symbol(sym.LOAD,yytext()));
}
<YYINITIAL> {NORMAL} { 
	return (new Symbol(sym.NORMAL,yytext()));
}
<YYINITIAL> {PERFORM} { 
	return (new Symbol(sym.PERFORM,yytext()));
}
<YYINITIAL> {REMOVE_FROM_CONTEXT} { 
	return (new Symbol(sym.REMOVE_FROM_CONTEXT,yytext()));
}
<YYINITIAL> {SET_CONTEXT} { 
	return (new Symbol(sym.SET_CONTEXT,yytext()));
}
<YYINITIAL> {SET_DEFAULT_CONTEXT} { 
	return (new Symbol(sym.SET_DEFAULT_CONTEXT,yytext()));
}
<YYINITIAL> {SET_MODE_1} { 
	return (new Symbol(sym.SET_MODE_1,yytext()));
}
<YYINITIAL> {SET_MODE_2} { 
	return (new Symbol(sym.SET_MODE_2,yytext()));
}
<YYINITIAL> {SET_MODE_3} { 
	return (new Symbol(sym.SET_MODE_3,yytext()));
}
<YYINITIAL> {SHOW} { 
	return (new Symbol(sym.SHOW,yytext()));
}
<YYINITIAL> {TRACE} { 
	return (new Symbol(sym.TRACE,yytext()));
}
<YYINITIAL> {UNDEFINE_PATH} { 
	return (new Symbol(sym.UNDEFINE_PATH,yytext()));
}
<YYINITIAL> {UNLABELED} { 
	return (new Symbol(sym.UNLABELED,yytext()));
}
<YYINITIAL> {UNTRACE} { 
	return (new Symbol(sym.UNTRACE,yytext()));
}
<YYINITIAL> {INFERENCE} { 
	return (new Symbol(sym.INFERENCE,yytext()));
}
<YYINITIAL> {ACTING} { 
	return (new Symbol(sym.ACTING,yytext()));
}
<YYINITIAL> {STRING_LIT} { 
	return (new Symbol(sym.STRING_LIT,yytext()));
}
<YYINITIAL> {FILEPATH} { 
	return (new Symbol(sym.FILEPATH,yytext()));
}
<YYINITIAL> {EQUALITY} { 
	return (new Symbol(sym.EQUALITY,yytext()));
}
<YYINITIAL> {IMPLICATION} { 
	return (new Symbol(sym.IMPLICATION,yytext()));
}
<YYINITIAL> {OR_ENTAILMENT} { 
	return (new Symbol(sym.OR_ENTAILMENT,yytext()));
}
<YYINITIAL> {AND_ENTAILMENT} { 
	return (new Symbol(sym.AND_ENTAILMENT,yytext()));
}
<YYINITIAL> {NUMERICAL_ENTAILMENT} { 
	return (new Symbol(sym.NUMERICAL_ENTAILMENT,yytext()));
}
<YYINITIAL> {NOT} { 
	return (new Symbol(sym.NOT,yytext()));
}
<YYINITIAL> {ANDOR} { 
	return (new Symbol(sym.ANDOR,yytext()));
}
<YYINITIAL> {AND} { 
	return (new Symbol(sym.AND,yytext()));
}
<YYINITIAL> {OR} { 
	return (new Symbol(sym.OR,yytext()));
}
<YYINITIAL> {NAND} { 
	return (new Symbol(sym.NAND,yytext()));
}
<YYINITIAL> {NOR} { 
	return (new Symbol(sym.NOR,yytext()));
}
<YYINITIAL> {XOR} { 
	return (new Symbol(sym.XOR,yytext()));
}
<YYINITIAL> {IFF} { 
	return (new Symbol(sym.IFF,yytext()));
}
<YYINITIAL> {THRESH} { 
	return (new Symbol(sym.THRESH,yytext()));
}
<YYINITIAL> {ALL} { 
	return (new Symbol(sym.ALL,yytext()));
}
<YYINITIAL> {INT_LIT} { 
	return (new Symbol(sym.INT_LIT,yytext()));
}
<YYINITIAL> {COMMA} { 
	return (new Symbol(sym.COMMA,yytext()));
}
<YYINITIAL> {COLON} { 
	return (new Symbol(sym.COLON,yytext()));
}
<YYINITIAL> {OPEN_PARAN} { 
	return (new Symbol(sym.OPEN_PARAN,yytext()));
}
<YYINITIAL> {CLOSE_PARAN} { 
	return (new Symbol(sym.CLOSE_PARAN,yytext()));
}
<YYINITIAL> {OPEN_CURLY} { 
	return (new Symbol(sym.OPEN_CURLY,yytext()));
}
<YYINITIAL> {CLOSE_CURLY} { 
	return (new Symbol(sym.CLOSE_CURLY,yytext()));
}
<YYINITIAL> {WITHSOME} { 
	return (new Symbol(sym.WITHSOME,yytext()));
}
<YYINITIAL> {WITHALL} { 
	return (new Symbol(sym.WITHALL,yytext()));
}
<YYINITIAL> {WFF} { 
	return (new Symbol(sym.WFF,yytext()));
}
<YYINITIAL> {IFDO} { 
	return (new Symbol(sym.IFDO,yytext()));
}
<YYINITIAL> {WHENDO} { 
	return (new Symbol(sym.WHENDO,yytext()));
}
<YYINITIAL> {WHENEVERDO} { 
	return (new Symbol(sym.WHENEVERDO,yytext()));
}
<YYINITIAL> {ACTPLAN} { 
	return (new Symbol(sym.ACTPLAN,yytext()));
}
<YYINITIAL> {EFFECT} { 
	return (new Symbol(sym.EFFECT,yytext()));
}
<YYINITIAL> {GOALPLAN} { 
	return (new Symbol(sym.GOALPLAN,yytext()));
}
<YYINITIAL> {PRECONDITION} { 
	return (new Symbol(sym.PRECONDITION,yytext()));
}
<YYINITIAL> {KPLUS} { 
	return (new Symbol(sym.KPLUS,yytext()));
}
<YYINITIAL> {KSTAR} { 
	return (new Symbol(sym.KSTAR,yytext()));
}
<YYINITIAL> {COMPOSE} { 
	return (new Symbol(sym.COMPOSE,yytext()));
}
<YYINITIAL> {CONVERSE} { 
	return (new Symbol(sym.CONVERSE,yytext()));
}
<YYINITIAL> {IRREFLEXIVE_RESTRICT} { 
	return (new Symbol(sym.IRREFLEXIVE_RESTRICT,yytext()));
}
<YYINITIAL> {DOMAIN_RESTRICT} { 
	return (new Symbol(sym.DOMAIN_RESTRICT,yytext()));
}
<YYINITIAL> {RANGE_RESTRICT} { 
	return (new Symbol(sym.RANGE_RESTRICT,yytext()));
}
<YYINITIAL> {CFRES} { 
	return (new Symbol(sym.CFRES,yytext()));
}
<YYINITIAL> {BANGPATH} { 
	return (new Symbol(sym.BANGPATH,yytext()));
}
<YYINITIAL> {EMPTYPATH} { 
	return (new Symbol(sym.EMPTYPATH,yytext()));
}
<YYINITIAL> {EXPAND} { 
	return (new Symbol(sym.EXPAND,yytext()));
}
<YYINITIAL> {REDUCE} { 
	return (new Symbol(sym.REDUCE,yytext()));
}
<YYINITIAL> {NONE} { 
	return (new Symbol(sym.NONE,yytext()));
}
<YYINITIAL> {IDENTIFIER} { 
	return (new Symbol(sym.IDENTIFIER,yytext()));
}
<YYINITIAL> . {
  return new Symbol(sym.error, "Invalid input: " + yytext());
}
